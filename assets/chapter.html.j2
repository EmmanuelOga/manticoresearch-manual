<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap"
        rel="stylesheet">

    <link rel="stylesheet" href="pygments.css" />
    <link rel="stylesheet" href="common.css" />
    <link rel="stylesheet" href="chapter.css" />

    <title>{{chapter_title}} - Manticore Search {{version}}</title>
</head>

<body>
    {%for entry in entries%}
    <section class="chapter-section" id="{{entry.cssid()}}">
        <header>
            <a class="chapter-link" href="#{{entry.cssid()}}"> Â¶ {{entry.clean_breadcrumb()}}</a>

            {% if entry.source_exists() %}
            {{entry.html_header_and_content()[0]}}
            {% else %}
            <h1>{{entry.title}}</h1>
            {% endif %}
        </header>

        {% if entry.source_exists() %}
        {{entry.html_header_and_content()[1] }}
        {% endif %}
    </section>
    {%endfor%}

    <script>
        const hide = (el) => el.style.display = 'none';
        const show = (el) => el.style.display = '';

        function gen(html) {
            const template = document.createElement('template');
            template.innerHTML = html.trim();
            return template.content;
        }

        function processCodeBlock(block) {
            block.append(gen(`<div class="selectors"></div><div class="codes"></div>`));

            let selectors = block.querySelector(".selectors");
            let codes = block.querySelector(".codes");

            function hideAllCodes() {
                for (let i = 0; i < codes.children.length; i++) {
                    hide(codes.children[i]);
                }
            }

            function clearSelection() {
                for (let i = 0; i < selectors.children.length; i++) {
                    selectors.children[i].classList.remove('selected');
                }
            }

            let items = block.querySelectorAll('.xcodeblock-item');
            for (let i = 0; i < items.length; i++) {
                let lang = items[i];

                lang.remove();

                let sel = lang.querySelector('.item-select');
                let codeBlocks = lang.querySelectorAll('.codehilite');

                if (!sel || codeBlocks.length == 0) {
                    continue
                }

                sel.remove();
                selectors.append(sel);

                codeBlocks.forEach((cb) => {
                    cb.remove();
                    codes.append(cb);
                });

                if (i == 0) {
                    sel.classList.add('selected');
                } else {
                    codeBlocks.forEach((cb) => { hide(cb); });
                }

                sel.addEventListener('click', () => {
                    hideAllCodes();
                    clearSelection();
                    codeBlocks.forEach((cb) => { show(cb); });
                    sel.classList.add('selected');
                });
            }
        }

        let codeBlocks = document.querySelectorAll('.xcodeblock');
        for (let i = 0; i < codeBlocks.length; i++) {
            processCodeBlock(codeBlocks[i]);
        }

        // Notify parent window when the header changes.
        // IntersectionObserver kind of work but it's not perfect,
        // hence the timeout, querying of all links, etc.
        const allLinks = [...document.querySelectorAll('.chapter-link')];
        let obs = new IntersectionObserver(() => {
            setTimeout(() => {
                let top;
                for (el of allLinks) {
                    if (el.getBoundingClientRect().y == 0) {
                        top = el;
                    }
                }
                if (top) window.parent.postMessage({ "header-changed": top.hash });
            }, 100);
        });
        document.querySelectorAll('.chapter-link').forEach((el) => {
            obs.observe(el);
        });
    </script>
</body>

</html>